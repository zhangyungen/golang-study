// Code generated by scripts/generate_requests.py; DO NOT EDIT.
package request

import (
	"github.com/lakala/laop-sdk-go/pkg/laopsdk/enums"
	"github.com/lakala/laop-sdk-go/pkg/laopsdk/request/model"
)

type V3RfdRefundFrontRefundRequest struct {
	V3Common
	MerchantNo       string                        `json:"merchant_no,omitempty"`
	TermNo           string                        `json:"term_no,omitempty"`
	OutTradeNo       string                        `json:"out_trade_no,omitempty"`
	RefundAmount     string                        `json:"refund_amount,omitempty"`
	RefundReason     string                        `json:"refund_reason,omitempty"`
	OriginLogNo      string                        `json:"origin_log_no,omitempty"` //origin_out_trade_no、origin_log_no、origin_trade_no至少一个必填（调用收银台下单接口拉起交易后发起退款时至少要传两个，同时存在时优先级顺序如下：origin_trade_no、origin_log_no、origin_out_trade_no
	OriginOutTradeNo string                        `json:"origin_out_trade_no,omitempty"`
	OriginTradeNo    string                        `json:"origin_trade_no,omitempty"`
	RefundAccMode    string                        `json:"refund_acc_mode,omitempty"`
	NotifyUrl        string                        `json:"notify_url,omitempty"`
	RefundAmtSts     string                        `json:"refund_amt_sts,omitempty"` //00 分账前，01 分账后；分账交易部分退货的情况，需要前端上送交易的分账状态。分账核心，处理部分退货时，根据这个判断，按分账前规则处理，还是分账后规则处理
	LocationInfo     model.V3LabsTradeLocationInfo `json:"location_info,omitempty"`
}

func (r *V3RfdRefundFrontRefundRequest) ToBody() (string, error) {
	return r.BuildBody(r)
}

func (r *V3RfdRefundFrontRefundRequest) FunctionCode() enums.FunctionCode {
	return enums.API_V3_RFD_REFUND_FRONT_REFUND
}
